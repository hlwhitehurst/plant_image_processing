#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec  2 15:53:48 2019

@author: hannahwhitehurst
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 14 12:21:48 2019

@author: hannahwhitehurst
"""

import os
import glob
import cv2
import numpy as np
import csv
import math




os.chdir("/path/to/directory/with/pictures/")
mypath= "/path/to/directory/with/pictures/"
dirs = os.listdir(mypath)
time_point = "<day_processed>_"

#Below, replace the parenthsis with the radius of the tissue culture well, which we square (**2)
actual_area= math.pi*(7.8**2)   

 
dir_cropped_binary = os.path.join(mypath,"cropped_binary")
if not os.path.exists(dir_cropped_binary):
    os.mkdir(dir_cropped_binary)   


#in the paranthesis, put the number of wells you expect in each photo (must be the same number for all photos.)
wells_exp= int(1)

#Now we are going to crop the images in the shape of the well's circle.

#Create a list of all of the well files currently in the directory.
well_picfiles = glob.glob('*.jpg')
well_picfiles.sort()
print("\n".join(well_picfiles))


#create an empty list to which we will add the area measurements of the plants
plant_area = []
error_pics = []


#we create a list reflecting the number of wells expected for each photo. 
if wells_exp > 1:
    well_list = list(range(0,wells_exp -1))
else:
    well_list = [0]

#Now we move forward with splitting the images (if necessary), counting the green pixels, saving the images, and recording the area.


for well in well_picfiles:
    img1 = cv2.imread(well)
    img = cv2.imread(well,0)
    img3 = cv2.imread(well)

    # Determine average green color:
    height,width = img.shape
    #mask_plant = np.zeros((height,width), np.uint8)
 
    thresh_green = [15,200,5]
    thresh = np.uint8(thresh_green)

    #Identify min and max of brightness
    minMax = cv2.minMaxLoc(img)
    img1 = (img1 *(90/127 + 1)) -30
    b , g, r = cv2.split(img1)
    gray = b
    gray = cv2.GaussianBlur(gray, (7, 7), 0)
    ret, thresh = cv2.threshold(gray, 160, 255, cv2.THRESH_BINARY)
    #prev 160,240

    # Create mask
    height,width = img.shape
    mask = np.zeros((height,width), np.uint8)
    thresh = np.uint8(thresh)
    edges = cv2.Canny(thresh, 200, 375)

    circles = cv2.HoughCircles(edges, cv2.HOUGH_GRADIENT, 1, 10000, param1 = 50, param2 = 30, minRadius = 700, maxRadius = 1250)

    if circles is not None:

        circles = np.uint16(np.around(circles)) 
  
        for pt in circles[0, :]: 
            a, b, r = pt[0], pt[1], pt[2] 
    
        # Draw on mask
            cv2.circle(mask,(a,b),r,(255,255,255),thickness=-1)
            cv2.circle(mask,(a,b),r,(0,0,0),thickness=50)
# Copy that image using that mask
            masked_data = cv2.bitwise_and(thresh, thresh, mask=mask)
        
# Apply Threshold
            _,thresh2 = cv2.threshold(mask,50,165,cv2.THRESH_BINARY)

# Find Contour (i.e the connecting pixels which outline the circle of the well)
        
        contours, heirarchy = cv2.findContours(thresh2,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
        for i in well_list:
            cnt = contours[i]
            x,y,w,h = cv2.boundingRect(cnt)

# Crop masked_data
            crop = masked_data[y:y+h,x:x+w]
        
# count/average green pixels
            hsv = cv2.cvtColor(img3, cv2.COLOR_BGR2HSV)

        # define range of blue color in HSV (i.e. darkest)
            lower_green = np.array([20,25, 25])
            upper_green = np.array([80,170,170])

        # Threshold the HSV image to get only green colors
            mask_green = cv2.inRange(hsv, lower_green, upper_green)  
            
            hsv=np.uint8(hsv)
        # Bitwise-AND mask and original image
            res = cv2.bitwise_and(hsv,hsv, mask=mask_green)

            res_crop= cv2.cvtColor(res[y:y+h,x:x+w],cv2.COLOR_HSV2BGR)
            imgcol=cv2.cvtColor(crop,cv2.COLOR_GRAY2BGR)
  
            final_mask= res_crop + imgcol

            non_black_pixels_mask = cv2.countNonZero(crop)
            black_pixels= crop.size - non_black_pixels_mask

        
#save cropped file
            file_portion = '_' + str(i) + '_f'
            new_file= os.path.join(dir_cropped_binary, time_point + file_portion + well)
            new_file= os.path.join(dir_cropped_binary, time_point + well)
            cv2.imwrite(new_file,crop)#final_mask
  
#determine area of image     
            rect_area=h*w
            circle_area=((w/2)**2)*math.pi

#count green pixels in circle
            #green_pix= np.sum(non_black_pixels_mask)
            green_pix=black_pixels-(rect_area - circle_area)
            green_circle_percent=green_pix/circle_area
        
            greenarea_mm = (green_circle_percent)*actual_area
            values_list = [well, greenarea_mm, time_point]
            
            plant_area.append(values_list)
            print(well, file_portion, greenarea_mm, "image processing complete.")

    else:
        error_well = [well]
        error_pics.append(error_well)
        print(well, " image processing error. Skipping.")


with open('plant_area_and_color.csv', 'w') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerows(plant_area)
csvFile.close()


with open('error_wells_color.csv', 'w') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerows(error_pics)
csvFile.close()

